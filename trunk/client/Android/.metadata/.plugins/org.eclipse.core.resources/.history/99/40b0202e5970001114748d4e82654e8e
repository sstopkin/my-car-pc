package robot.rules;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ImageButton;

public class viewlay extends Activity {

	public WebView webView;
	private ImageButton buttonleft;
	private ImageButton buttonright;
	private ImageButton buttonup;
	private ImageButton buttondown;
	private ImageButton buttonbeep;
	private ImageButton buttonstop;
	private BufferedWriter out;
	private Socket s;
	public int mov_state = 0;
	public int rot_state = 0;
	public int beep_state = 0;
	ScheduledExecutorService timer1;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Intent intent = getIntent();
		setContentView(R.layout.viewlay);
		String url = intent.getStringExtra("url");
		webView = (WebView) findViewById(R.id.webView1);
		webView.setWebViewClient(new WebViewClient());
		webView.getSettings().setJavaScriptEnabled(true);
		webView.loadUrl("http://" + url + ":7776/?action=snapshot");// 7776

		try {
			s = new Socket(url, 3000);
			out = new BufferedWriter(
					new OutputStreamWriter(s.getOutputStream()));
			out.write("F000S250");
			out.flush();
		} catch (UnknownHostException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		buttondown = (ImageButton) findViewById(R.id.ImageButtonDown);
		buttonleft = (ImageButton) findViewById(R.id.ImageButtonLeft);
		buttonright = (ImageButton) findViewById(R.id.ImageButtonRight);
		buttonup = (ImageButton) findViewById(R.id.ImageButtonUp);
		buttonbeep = (ImageButton) findViewById(R.id.ImageButtonBeep);
		buttonstop = (ImageButton) findViewById(R.id.ImageButtonStop);

		buttonbeep.setOnTouchListener(new OnTouchListener() {

			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_DOWN) {
					beep_state = 1;
				} else if (event.getAction() == MotionEvent.ACTION_UP) {
					beep_state = 0;
				}
				return false;
			}
		});

		buttonstop.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_DOWN) {
					mov_state = 0;
					rot_state = 0;
				} else if (event.getAction() == MotionEvent.ACTION_UP) {
					mov_state = 0;
					rot_state = 0;
				}
				return false;
			}
		});

		buttondown.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_DOWN) {
					mov_state = 2;
				} else if (event.getAction() == MotionEvent.ACTION_UP) {
					mov_state = 0;
				}
				return false;
			}
		});

		buttonleft.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_DOWN) {
					rot_state = 1;
				} else if (event.getAction() == MotionEvent.ACTION_UP) {
					rot_state = 0;
				}
				return false;
			}
		});

		buttonright.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_DOWN) {
					rot_state = 2;
				} else if (event.getAction() == MotionEvent.ACTION_UP) {
					rot_state = 0;
				}
				return false;
			}
		});

		buttonup.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_DOWN) {
					mov_state = 1;
				} else if (event.getAction() == MotionEvent.ACTION_UP) {
					mov_state = 0;
				}
				return false;
			}
		});

		ScheduledExecutorService timer = Executors
				.newSingleThreadScheduledExecutor();
		timer.scheduleAtFixedRate(new Runnable() {

			public void run() {

				webView.reload();

			}

		}, 10, Long.parseLong("500"), TimeUnit.MILLISECONDS);

		timer1 = Executors
				.newSingleThreadScheduledExecutor();
		timer1.scheduleAtFixedRate(new Runnable() {
			public void run() {
				try {
					netwsend();
				} catch (UnknownHostException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					out.write("\n");
					out.flush();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}, 10, Long.parseLong("100"), TimeUnit.MILLISECONDS);
	}

	public void netwsend() throws UnknownHostException, IOException {

		switch (mov_state) {
		case 1:
			try {
				out.write("F250");
				out.flush();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		case 2:
			try {
				out.write("R250");
				out.flush();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		default:
			try {
				out.write("F000");
				out.flush();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		}
		switch (rot_state) {
		case 1:
			try {
				out.write("S000");
				out.flush();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		case 2:
			try {
				out.write("S500");
				out.flush();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		default:
			try {
				out.write("S250");
				out.flush();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		}
		switch (beep_state) {
		case 1:
			try {
				out.write("I001");
				out.flush();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		case 0:
			try {
				out.write("I000");
				out.flush();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		default:
			break;
		}

	}

//	 public void timerSetup(){
//	 autoUpdate = new Timer();
//	 autoUpdate.schedule(new TimerTask() {
//	 @Override
//	 public void run() {
//	 runOnUiThread(new Runnable() {
//	 @Override
//	 public void run() {
//	 //Actions goes here
//	 webView.loadUrl(url);
//	 }
//	 });
//	 }
//	 }, 0, 500);//refresh rate time interval (ms)
//	 }

	 public void onStop() {
	 try {
	 s.close();
	 } catch (IOException e) {
	 // TODO Auto-generated catch block
	 e.printStackTrace();
	 }
	 }
	 @Override
	 public void onBackPressed() {
		 try {
			this.out.flush();
			this.out.close();
			this.s.close();
			this.webView.stopLoading();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		 
		 this.timer1.shutdownNow();
	     return;
	 }
}
